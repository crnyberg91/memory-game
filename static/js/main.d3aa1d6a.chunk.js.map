{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/Container/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","score","highScore","Jumbotron","Container","concat","fluid","children","Card","src","image","id","key","onClick","alt","name","App","state","chars","clickedChars","incorrect","_this","setState","reshuffle","array","t","i","m","length","Math","floor","random","newHighScoreChange","console","log","newHighScore","handleClick","charId","includes","Object","toConsumableArray","_this2","this","components_Nav","components_Jumbotron","components_Container","map","char","components_Card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u/DAaeA,MAVf,SAAaC,GACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMK,OAClBJ,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMM,aCKhBC,MAXf,WACI,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,4FCDWI,MAJf,SAAmBR,GACjB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAK,OAAcT,EAAMU,MAAQ,SAAW,KAAOV,EAAMW,wBCa5DC,MAbf,SAAcZ,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,MACdC,GAAIf,EAAMe,GACVC,IAAKhB,EAAMe,GACXE,QAASjB,EAAMiB,QACfb,UAAU,6BACVc,IAAKlB,EAAMmB,SCyEJC,6MA1EbC,MAAQ,CACNC,QACAC,aAAc,GACdlB,MAAO,EACPC,UAAW,KAGbkB,UAAY,WACVC,EAAKC,SAAS,CACZrB,MAAO,EACPkB,aAAc,QAIlBI,UAAY,SAACC,GAGX,IAFA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAEPD,GACLD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAC/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAGb,OAAOD,KAGTQ,mBAAqB,WAEnB,GADAC,QAAQC,IAAI,SAAUb,EAAKJ,MAAMhB,OAC7BoB,EAAKJ,MAAMhB,OAASoB,EAAKJ,MAAMf,UAAW,CAC5C,IAAMiC,EAAed,EAAKJ,MAAMhB,MAChCoB,EAAKC,SAAS,CACZpB,UAAWiC,QAIjBC,YAAc,SAACC,GAEbJ,QAAQC,IAAI,UAAYG,GACpBhB,EAAKJ,MAAME,aAAamB,SAASD,GACnChB,EAAKD,aAELC,EAAKC,SAAS,CACZH,aAAY,GAAAd,OAAAkC,OAAAC,EAAA,EAAAD,CAAMlB,EAAKJ,MAAME,cAAjB,CAA+BkB,IAC3CpC,MAAOoB,EAAKJ,MAAMhB,MAAQ,GACzBoB,EAAKW,oBACRX,EAAKE,UAAUF,EAAKJ,MAAMC,OAC1Be,QAAQC,IAAI,UAAYG,EAAQ,WAAahB,EAAKJ,MAAMhB,iFAGnD,IAAAwC,EAAAC,KACP,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,CAAK1C,MAAOyC,KAAKzB,MAAMhB,MACrBC,UAAWwC,KAAKzB,MAAMf,YAExBL,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,KACGH,KAAKzB,MAAMC,MAAM4B,IAAI,SAAAC,GAAI,OACxBlD,EAAAC,EAAAC,cAACiD,EAAD,CACErC,GAAIoC,EAAKpC,GACTC,IAAKmC,EAAKpC,GACVI,KAAMgC,EAAKhC,KACXL,MAAOqC,EAAKrC,MACZG,QAAS,WAAQ4B,EAAKL,YAAYW,EAAKpC,kBAlEnCsC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3aa1d6a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar navbar-light bg-success\">\n        <h1>Clicky Game</h1>\n        <li>Score: {props.score}</li>\n        <li>High Score: {props.highScore}</li>\n        </nav>\n    )\n}\n\nexport default Nav;","import React from \"react\";\n\nfunction Jumbotron () {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container\">\n    <h1 className=\"display-4\">Fluid jumbotron</h1>\n    <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n  </div>\n</div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <img src={props.image}\n        id={props.id}\n        key={props.id}\n        onClick={props.onClick}\n        className=\"card-img-top img-container\"\n        alt={props.name} />\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\nimport chars from \"./chars.json\";\nimport Card from \"./components/Card\";\n\nclass App extends React.Component {\n\n  state = {\n    chars,\n    clickedChars: [],\n    score: 0,\n    highScore: 0\n  };\n\n  incorrect = () => {\n    this.setState({\n      score: 0,\n      clickedChars: []\n    })\n  }\n\n  reshuffle = (array) => {\n    let m = array.length, t, i;\n\n    while (m) {\n      i = Math.floor(Math.random() * m--);\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  newHighScoreChange = () => {\n    console.log('score:', this.state.score);\n    if (this.state.score >= this.state.highScore) {\n      const newHighScore = this.state.score;\n      this.setState({\n        highScore: newHighScore\n      })\n    }\n  }\n  handleClick = (charId) => {\n    // event.preventDefault();\n    console.log(\"clicked\" + charId)\n    if (this.state.clickedChars.includes(charId)) {\n      this.incorrect()\n    } else {\n      this.setState({\n        clickedChars: [...this.state.clickedChars, charId],\n        score: this.state.score + 1\n      }, this.newHighScoreChange);\n      this.reshuffle(this.state.chars);\n      console.log(\"clicked\" + charId, \" score: \" + this.state.score)\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav score={this.state.score}\n          highScore={this.state.highScore} \n        />\n        <Jumbotron />\n        <Container>\n          {this.state.chars.map(char => (\n            <Card\n              id={char.id}\n              key={char.id}\n              name={char.name}\n              image={char.image}\n              onClick={() => { this.handleClick(char.id) }}\n            />\n          ))}\n        </Container>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}